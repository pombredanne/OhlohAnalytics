<?xml version="1.0" encoding="UTF-8"?>
<response>
  <status>success</status>
  <result>
    <project>
      <id>59387</id>
      <name>caldav4j</name>
      <url>http://www.ohloh.net/p/caldav4j.xml</url>
      <html_url>http://www.ohloh.net/p/caldav4j</html_url>
      <created_at>2008-12-17T18:46:51Z</created_at>
      <updated_at>2013-06-26T04:01:35Z</updated_at>
      <description>CalDAV4j OverviewCalDAV4j is a protocol library that extends the Slide project's WebDAV client library (which itself is an extension of the Apache's HttpClient library) to allow high level manipulation of CalDAV calendar collections as well as lower level CalDAV protocol interactions. 

REMEMBER: Caldav4j is tested against JAVA 1.6 you're welcome to test junits against JAVA 1.5 and submit issues and patches 

GoalsA high level API: This API works at the level of ical4j objects, and allows for high level operations. All the &quot;hard&quot; protocol work that you need to do to make this happen is hidden from the end user. Supports: an easy and flexible query language (eg. for events in a given date range); recurring event management (eg. updating master events and recurrence instances); A lower level protocol API: Let's you work at the Http/WebDAV/CalDAV protocol level by creating instances of HttpMethods (like GetMethod, MkCalendar, ReportMethod) and executing them.  Performance: When possible caches (such as caches of etags and icalendar resources) are maintained so that network chatter and parsing of icalender files is minimized. Compliance: We aim to be implement the following specs  CalDAV spec and updates   WebDAV tickets spec  Caldav Scheduling specs  Join usConsider joining: WhyJoin 

StatusCalDAV4j 0.5 is the current (tagged) release. 

In the 0.6 (trunk) we're working on: 

basic scheduling support a standard cache implementation (quick and dirty) 

The 0.5 release includes: 

basic google calendar support a method for easy caldav query creation example classes for connecting to bedework and google calendar better junit testing 

The 0.4 release includes: 

Support for  reports More and more ready-to-use  methods to search events Code refactoring HttpClient v3.0 support (download Slide for HttpClient v3 here!) More Slide isolation (for a future JackRabbit switch) Better Bedework support 

The 0.3 release features include: 

Support for  reports Protocol level support for MKCALENDAR, GET, REPORT, PUT  High level API for accessing events within a calendar collection Caching of CalDAV resources Ticket Support 

Among the things not supported yet are: 

Free Busy reports High level API for accessing anything other than VEVENTS (like VTODO's for example) ... ? 

More information here. 

BuildingCalDAV4j uses Maven 2.x as its build system. Here is some more information on building CalDAV4j 

UsingDownload the latest JAR file and make sure it's in your classpath. The unit tests are the best place right now to see how to use CalDAV4j. Tutorials and more documentation are forthcoming. 

What's NextExactly what's next is up in the air right - there are some outstanding issues (have better documentation, use jackrabbit library, etc) but exactly what happens in what order will largely depend on demand from users, so make sure to make your voice heard on the discussion group! 

The roadmap will be updated as things flesh out more.   

License &amp; CopyrightCalDAV4j is licensed under the Apache 2.0 License and copyright 2007 Open Source Application Foundation</description>
      <homepage_url>http://code.google.com/p/caldav4j</homepage_url>
      <download_url></download_url>
      <url_name>caldav4j</url_name>
      <medium_logo_url>no_logo.png</medium_logo_url>
      <small_logo_url>no_logo.png</small_logo_url>
      <user_count>2</user_count>
      <average_rating></average_rating>
      <rating_count>0</rating_count>
      <review_count>0</review_count>
      <analysis_id>14411407</analysis_id>
      <tags>
        <tag>osaf</tag>
        <tag>calendar</tag>
        <tag>caldav</tag>
        <tag>webdav</tag>
        <tag>java</tag>
      </tags>
      <analysis>
        <id>14411407</id>
        <url>http://www.ohloh.net/analyses/14411407.xml</url>
        <project_id>59387</project_id>
        <updated_at>2013-07-12T03:36:17Z</updated_at>
        <logged_at>2013-07-12T03:35:17Z</logged_at>
        <min_month>2007-10-01T00:00:00Z</min_month>
        <max_month>2012-08-01T00:00:00Z</max_month>
        <twelve_month_contributor_count>1</twelve_month_contributor_count>
        <total_code_lines>11245</total_code_lines>
        <factoids>
          <factoid type="FactoidActivityIncreasing">
Increasing Y-O-Y development activity          </factoid>
          <factoid type="FactoidAgeOld">
Well-established codebase          </factoid>
          <factoid type="FactoidCommentsAverage">
Average number of code comments          </factoid>
          <factoid type="FactoidTeamSizeOne">
Only a single active developer          </factoid>
        </factoids>
        <languages graph_url="http://www.ohloh.net/p/caldav4j/analyses/14411407/languages.png">
          <language color="9A63AD" percentage="98" id="5">
Java          </language>
          <language color="555555" percentage="2" id="3">
XML          </language>
        </languages>
        <main_language_id>5</main_language_id>
        <main_language_name>Java</main_language_name>
      </analysis>
      <licenses>
      </licenses>
    </project>
  </result>
</response>
